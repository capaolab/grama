model User {
    id             String          @id @default(uuid())
    email          String          @unique
    password       String
    active         Boolean         @default(true)
    userType       UserType        @default(INTERNAL) // Helps distinguish between internal users and client users
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    profile        Profile?
    permissionSets PermissionSet[]

    // Internal user relations
    managedLeads   Lead[]   @relation("UserLeads")
    managedClients Client[] @relation("UserClients")
    authoredPosts  Post[]   @relation("UserPosts")
    sales          Sale[]   @relation("UserSales")

    // Client user relation
    clientAccess ClientAccess?
}

enum UserType {
    INTERNAL // For employees, managers, etc.
    CLIENT // For client users
}

model Profile {
    id          String    @id @default(uuid())
    firstName   String
    lastName    String
    phone       String?
    avatar      String?
    dateOfBirth DateTime?
    bio         String?   @db.Text
    address  Address?
    user     User     @relation(fields: [userId], references: [id])
    userId   String   @unique
    metadata Json? // For additional flexible fields
}

model Employee {
    id              String    @id @default(uuid())
    user            User      @relation(fields: [userId], references: [id])
    userId          String    @unique
    position        String?
    department      String?
    hireDate        DateTime?
    terminationDate DateTime?
}

model Address {
    id         String   @id @default(uuid())
    street     String
    number     String
    complement String?
    district   String
    city       String
    state      String
    zipCode    String
    profile    Profile? @relation(fields: [profileId], references: [id])
    profileId  String?  @unique
    client     Client?  @relation(fields: [clientId], references: [id])
    clientId   String?  @unique
    lead       Lead?    @relation(fields: [leadId], references: [id])
    leadId     String?  @unique
}

model Note {
    id        String   @id @default(uuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    client    Client?  @relation(fields: [clientId], references: [id])
    clientId  String?
    lead      Lead?    @relation(fields: [leadId], references: [id])
    leadId    String?
}
