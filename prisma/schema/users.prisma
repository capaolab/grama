model User {
    id        String   @id @default(uuid())
    email     String   @unique
    password  String
    active    Boolean  @default(true)
    userType  UserType @default(INTERNAL) // Helps distinguish between internal users and client users
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    profile   Profile?
    role      Role?
    clientId Int
    clientePosition ClientPosition
    
    // Auth relations
    sessions   Session[] @relation("UserSessions")

    // CMS relations
    authoredPosts Post[] @relation("UserPosts")

    // CRM relations
    sales        Sale[] @relation("UserSales")
    managedLeads Lead[] @relation("UserLeads")

    //TEST Create an integration test to check if the unique constraint is working
    @@unique([email, clientId, clientePosition])
}

enum UserType {
    INTERNAL // For employees, managers, etc.
    CLIENT // For client users
}

model Profile {
    id          Int       @id @default(autoincrement())
    firstName   String
    lastName    String
    phone       String?
    avatar      String?
    dateOfBirth DateTime?
    bio         String?   @db.Text

    // Relations
    address  Address?
    user     User     @relation(fields: [userId], references: [id])
    userId   String   @unique
    metadata Json? // For additional flexible fields

    //TEST Create an integration test to check if the unique constraint is working 
    @@unique([firstName, lastName])
}

model Address {
    id         String   @id @default(uuid())
    street     String
    number     String
    complement String?
    district   String
    city       String
    state      String
    zipCode    String

    // Relations
    profile    Profile? @relation(fields: [profileId], references: [id])
    profileId  Int  @unique
}
